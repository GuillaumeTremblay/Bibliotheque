<?xml version="1.0"
      encoding="UTF-8"?>

<!--
   - Ant 'build-common' file.
   -
   - Author: Gilles Benichou
-->

<!-- ==================================================================== -->
<!-- Optional tag definition                                              -->
<!-- ==================================================================== -->
<!-- Checkstyle definition -->
<taskdef resource="checkstyletask.properties"
         classpath="${ant.home}/lib/checkstyle-*.jar"/>

<!-- ==================================================================== -->
<!-- Compiler                                                             -->
<!-- ==================================================================== -->
<property name="build.compiler"
          value="modern"/>

<!-- ==================================================================== -->
<!-- Default deployment target                                            -->
<!-- ==================================================================== -->
<property name="target"
          value="default"/>

<!-- ==================================================================== -->
<!-- "Permanent" folders or files (i.e. stored in Git)                    -->
<!-- ==================================================================== -->
<!-- Source files folders -->
<property name="src.dir"
          value="src"/> <!-- Source files -->

<property name="web.dir"
          value="webapp"/> <!-- Web application base folder -->

<!-- Libraries, from .java, .class, .jar and .zip files -->
<property name="lib.dir"
          value="${web.dir}/WEB-INF/lib"/> <!-- Library folder -->

<property name="lib-exclude.dir"
          value="lib-exclude"/> <!-- For compilation only -->

<!-- Other folders, for configuration, compilation, documentation -->
<property name="conf-src.dir"
          value="conf-src"/> <!-- Configuration files with placeholders -->

<property name="lang.dir"
          value="${web.dir}/WEB-INF/classes/lang"/> <!-- Language files -->

<property name="javadoc.dir"
          value="javadoc"/> <!-- Javadoc folder -->

<!-- ==================================================================== -->
<!-- "Temporary" folders or files (i.e. not stored in Git)                -->
<!-- ==================================================================== -->
<property name="logs.dir"
          value="logs"/> <!-- Logs folder -->

<property name="temp.dir"
          value="temp"/> <!-- Temporary folder -->

<!-- ==================================================================== -->
<!-- Libraries, from .java, .class, .jar and .zip files (for the          -->
<!-- classpath)                                                           -->
<!-- ==================================================================== -->
<path id="class.path">
  <pathelement location="${lib.dir}"/>
  <fileset dir="${lib.dir}">
    <include name="*.jar"/>
    <include name="*.zip"/>
    <include name="*.class"/>
  </fileset>
  <fileset dir="${lib-exclude.dir}">
    <include name="*.jar"/>
    <include name="*.zip"/>
  </fileset>
</path>

<!-- ==================================================================== -->
<!-- INIT-COMMON ======================================================== -->
<!-- Common initialization target, that defines commonly used properties, -->
<!-- such as a timestamp.                                                 -->
<!-- ==================================================================== -->
<target name="init-common">
  <!-- Timestamps -->
  <tstamp>
    <format property="TODAY_CA"
            pattern="yyyy/MM/dd HH:mm"/>
  </tstamp>

  <!-- Server-dependent values -->
  <property file="${target}.properties"/>
  <property file="default.properties"/>

  <!-- Server-dependent filters -->
  <filter filtersfile="default.properties"/>
  <filter filtersfile="${target}.properties"/>

  <!-- Local filter values -->
  <filter token="logs.dir"
          value="${logs.dir}"/>

  <!-- We make sure the destination folders exist -->
  <mkdir dir="${temp.dir}"/>
  <mkdir dir="${web.dir}/WEB-INF/classes"/>
</target>

<!-- ==================================================================== -->
<!-- CLEAN-COMMON ======================================================= -->
<!-- Deletes the folder that contains the compiled classes.               -->
<!-- ==================================================================== -->
<target name="clean-common">
  <!-- Compiled files -->
  <delete dir="${web.dir}/WEB-INF/classes"/>
</target>

<!-- ==================================================================== -->
<!-- CLEAN-ALL-COMMON =================================================== -->
<!-- Deletes all "temporary" folders and files, ie the items that are not -->
<!-- stored in Git and are in fact generated by the various Ant targets.  -->
<!-- ==================================================================== -->
<target name="clean-all-common"
        depends="clean-common">
  <!-- Logs -->
  <delete dir="${web.dir}/WEB-INF/${logs.dir}"/>

  <!-- Temporary folder -->
  <delete dir="${temp.dir}"/>

  <!-- Web application server work folders -->
  <delete dir="${web.dir}/WEB-INF/work"/>
  <delete dir="${web.dir}/WEB-INF/tmp"/>
</target>

<!-- ==================================================================== -->
<!-- COMPILE-COMMON ===================================================== -->
<!-- Compiles all the source files.                                       -->
<!-- ==================================================================== -->
<target name="compile-common"
        depends="init-common">
  <!-- We run the 'depend' task to check all dependencies -->
  <depend srcdir="${src.dir}"
          destdir="${web.dir}/WEB-INF/classes"
          cache="${temp.dir}"
          closure="yes"/>
  <!-- Then, we compile the source files -->
  <javac srcdir="${src.dir}"
         destdir="${web.dir}/WEB-INF/classes"
         deprecation="${deprecation}"
         debug="${debug}"
         optimize="${optimize}"
         includeantruntime="false">
    <classpath refid="class.path"/>
    <classpath path="${web.dir}/WEB-INF/classes"/>
    <compilerarg value="-Xlint:unchecked"/>
  </javac>
</target>

<!-- ==================================================================== -->
<!-- CHECKSTYLE-COMMON ================================================== -->
<!-- Runs CheckStyle on the .java source files in ${src.dir}.             -->
<!-- ==================================================================== -->
<target name="checkstyle-common"
        unless="no-checkstyle"
        depends="init-common">
  <checkstyle config="${ant.home}/etc/checkstyle/checkstyle-front-end.xml"
              failOnViolation="true">
    <fileset dir="${src.dir}"
             includes="**/*.java"/>
    <classpath refid="class.path"/>
    <classpath path="${web.dir}/WEB-INF/classes"/>
  </checkstyle>
</target>

<!-- ==================================================================== -->
<!-- JAVADOC-COMMON ===================================================== -->
<!-- Generates the javadoc from the source files.                         -->
<!-- ==================================================================== -->
<target name="javadoc-common"
        depends="checkstyle-common">
  <!-- Javadoc generation -->
  <mkdir dir="${javadoc.dir}"/>
  <javadoc sourcepath="${src.dir}"
           packagenames="ca.*"
           maxmemory="256M"
           additionalparam="-encoding UTF-8 -docencoding UTF-8 -charset UTF-8 "
           destdir="${javadoc.dir}"
           access="public" 
           author="true"
           version="true"
           use="true"
           windowtitle="${app.fullName} - ${TODAY_CA}"
           doctitle="${app.fullName}&lt;br&gt;&lt;small&gt;[${TODAY_CA}]&lt;/small&gt;">
    <classpath refid="class.path"/>
    <link href="jar:file:/${webapps.dir}/docs/bibliotheque-back-end-javadoc.jar!/javadoc"/>
    <link href="http://docs.oracle.com/javase/7/docs/api/"/>
    <link href="http://docs.oracle.com/cd/E17802_01/products/products/servlet/2.3/javadoc/"/>
    <link href="https://javamail.java.net/nonav/docs/api/"/>
    <link href="http://struts.apache.org/release/1.3.x/apidocs/"/>
    <link href="http://docs.jboss.org/hibernate/orm/3.5/api/"/>
    <link href="http://docs.spring.io/spring/docs/current/javadoc-api/"/>
  </javadoc>
</target>

<!-- ==================================================================== -->
<!-- CONFIGURE-COMMON =================================================== -->
<!-- This target requires a '-Dtarget=<server-name>' parameter when       -->
<!-- called. It creates the web application, properly configured for the  -->
<!-- specified server. Based on the properties file                       -->
<!-- '<server-name>.properties', it will replace any token with a         -->
<!-- matching key name by the corresponding values in all reference       -->
<!-- configuration files found in ${conf-src}.                            -->
<!-- ==================================================================== -->
<target name="configure-common"
        depends="compile-common,checkstyle-common"
        if="target">
  <!-- Copies the configuration files through different filters -->
  <copy todir="${web.dir}/WEB-INF/classes/conf"
        filtering="true"
        overwrite="true">
    <fileset dir="${conf-src.dir}"
             excludes="**/*ApplicationResources*.properties,**/log4j.properties,**/validation.xml"/> <!-- Configuration files -->
  </copy>

  <copy todir="${web.dir}/WEB-INF/classes/lang"
        filtering="true"
        overwrite="true">
    <fileset dir="${conf-src.dir}"
             includes="**/*ApplicationResources*.properties"/> <!-- Language files -->
  </copy>

  <copy todir="${web.dir}/WEB-INF/classes"
        filtering="true"
        overwrite="true">
    <fileset dir="${conf-src.dir}"
             includes="**/log4j.properties"/> <!-- Logger file -->
  </copy>

  <copy todir="${web.dir}/WEB-INF/validator/core"
        filtering="true"
        overwrite="true">
    <fileset dir="${conf-src.dir}"
             includes="**/validation.xml"/> <!-- Validation core file -->
  </copy>

  <copy todir="${web.dir}/META-INF"
        filtering="true"
        overwrite="true">
    <fileset dir="${conf-src.dir}"
             includes="**/context.xml"/> <!-- Webapp context file -->
  </copy>

  <!-- Creates the ${logs.dir} folder in '${web.dir}/WEB-INF' -->
  <mkdir dir="${web.dir}/WEB-INF/${logs.dir}"/>
</target>

<!-- ==================================================================== -->
<!-- JAR-COMMON ========================================================= -->
<!-- This target requires a '-Dtarget=<server-name>' parameter when       -->
<!-- called. This target will first run the 'configure-common' target,    -->
<!-- and then jar the resulting class files.                              -->
<!-- ==================================================================== -->
<target name="jar-common"
        depends="configure-common"
        if="target">
  <!-- JARs the classes together -->
  <property name="jarfile.name"
            value="${app.name}.jar"/>
  <jar destfile="${web.dir}/WEB-INF/lib/${jarfile.name}"
       basedir="${web.dir}/WEB-INF/classes"
       includes="**/*.class,**/*hbm.xml"/>

  <!-- Deletes the original class files -->
  <delete dir="${web.dir}/WEB-INF/classes/com"/>
</target>

<!-- ==================================================================== -->
<!-- DEPLOY-COMMON ====================================================== -->
<!-- This target requires a '-Dtarget=<server-name>' parameter when       -->
<!-- called. This target will first run the 'jar-common' target, and      -->
<!-- then copy the web application to the web application folder of your  -->
<!-- servlet engine.                                                      -->
<!-- ==================================================================== -->
<target name="deploy-common"
        depends="jar-common"
        if="target">
  <!-- Copies the generated web application to '${webapps.dir}' -->
  <copy todir="${webapps.dir}/${webapp.name}"
        overwrite="false"
        preservelastmodified="true">
    <fileset dir="${web.dir}"/>
  </copy>
</target>

<!-- ==================================================================== -->
<!-- WAR-COMMON ========================================================= -->
<!-- This target requires a '-Dtarget=<server-name>' parameter when       -->
<!-- called. This target will first run the 'configure-common' target,    -->
<!-- then it will create a Web Archive (WAR) with the web application.    -->
<!-- ==================================================================== -->
<target name="war-common"
        depends="configure-common"
        if="target">
  <!-- Creates the '.WAR' -->
  <property name="warfile.name"
            value="${app.name}.war"/>
  <jar destfile="${warfile.name}"
       basedir="${web.dir}"/>
</target>

<!-- ==================================================================== -->
<!-- WAR-DEPLOY-COMMON ================================================== -->
<!-- This target requires a '-Dtarget=<server-name>' parameter when       -->
<!-- called. This target will first run the 'war-common' target, then     -->
<!-- copy the WAR archive to the web application folder or your servlet   -->
<!-- engine.                                                              -->
<!-- ==================================================================== -->
<target name="war-deploy-common"
        depends="war-common"
        if="target">
  <!-- Copies the generated .WAR to '${webapps.dir}' -->
  <copy file="${warfile.name}"
        todir="${webapps.dir}"
        overwrite="false"
        preservelastmodified="true"/>
</target>

<!-- ==================================================================== -->
<!-- USAGE-COMMON ======================================================= -->
<!-- This target gives a description of the various targets defined here. -->
<!-- ==================================================================== -->
<target name="usage-common">
  <echo>
Targets

* clean      - Deletes the compiled files in'${build.dir}' to start up with fresh files.

* clean-all  - Deletes all "temporary" folders and files, ie the items that are not stored in Git and are in fact generated by the various Ant targets: '${build.dir}', '${conf.dir}', '${dist.dir}', '${javadoc.dir}', '${depend.cache}' and '${checkstyle.cache}'.

* compile    - Compiles the source files from '${src.dir}' to '${build.dir}'.

* checkstyle - Runs checkstyle over the .java source files in '${src.dir}'.

* javadoc    - Generates the javadoc from the source files found in '${src.dir}' and puts it into '${docs.dir}/${javadoc.dir}'.

* configure -Dtarget=&lt;server-name&gt;
             - Based on the properties file '&lt;server-name&gt;.properties', this target creates a distribution of the '${app.name} v${app.version}' web application, correctly configured for the specified server.
               The result is stored in '${dist.dir}/${webapp.name}'.
               This target expects one key to be defined in the server configuration file:
               * webapp.name: the name of the web application folder

* jar -Dtarget=&lt;server-name&gt;
             - Creates an archive called '${webapp.name}.jar' from the web application generated by 'configure-common'.
               This target expects one key to be defined in the server configuration file:
               * webapp.name: the name of the web application folder

* deploy -Dtarget=&lt;server-name&gt;
             - This target will first run the 'configure-common' target, and then copy the web application to the web application folder of your servlet engine.
               This target expects two keys to be defined in the server configuration file:
               * webapps.dir: the path to the webapps folder of the servlet engine
               * webapp.name: the name of the web application folder

* war -Dtarget=&lt;server-name&gt;
             - Creates an archive called '${webapp.name}.war' from the web application generated by 'configure-common'.
               This target expects one key to be defined in the server configuration file:
               * webapp.name: the name of the web application folder

* war-deploy -Dtarget=&lt;server-name&gt;
             - Copies the archive created by 'war-common' to the web application folder of your servlet engine.
               This target expects two keys to be defined in the server configuration file:
               * webapps.dir: the path to the webapps folder of the servlet engine
               * webapp.name: the name of the web application folder
                
* usage      - Displays this help message.
  </echo>
</target>
